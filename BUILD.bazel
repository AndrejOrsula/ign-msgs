load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:ign_export_header.bzl",
    "ign_export_header",
)
load(
    ":ign_msg_gen.bzl",
    "ign_msg_gen",
    "get_proto_headers")

package(default_visibility = ["//visibility:public"])

PROJECT_NAME = "ignition-msgs"
PROJECT_MAJOR = 6
PROJECT_MINOR = 0
PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/msgs/config.hh.in",
    out = "include/ignition/msgs/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_MAJOR_VERSION=%d" % (PROJECT_MAJOR),
        "PROJECT_MINOR_VERSION=%d" % (PROJECT_MINOR),
        "PROJECT_PATCH_VERSION=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % (PROJECT_NAME),
    ],
    visibility = ["//visibility:public"],
)

ign_export_header(
    name = "include/ignition/msgs/Export.hh",
    lib_name = "ignition-msgs",
    export_base = "IGNITION_MSGS",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/msgs/Factory.hh",
    "include/ignition/msgs/Filesystem.hh",
    "include/ignition/msgs/SuppressWarning.hh",
    "include/ignition/msgs/Utility.hh",
    "include/ignition/msgs/detail/SuppressWarning.hh",
]

protos = glob(["proto/ignition/msgs/*.proto"])

generate_include_header(
    name = "messagetypeshh_genrule",
    out = "include/ignition/msgs/MessageTypes.hh",
    hdrs = get_proto_headers(protos)
)

generate_include_header(
    name = "msghh_genrule",
    out = "include/ignition/msgs.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/msgs/config.hh",
        "include/ignition/msgs/Export.hh",
        "include/ignition/msgs/MessageTypes.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/msgs/config.hh",
    "include/ignition/msgs/Export.hh",
    "include/ignition/msgs/MessageTypes.hh",
    "include/ignition/msgs.hh",
]

# Custom Ignition Protoc plugin
cc_binary(
    name = "ign_msgs_gen",
    srcs = [
        "src/Generator.cc",
        "src/Generator.hh",
        "src/generator_main.cc"
    ],
    deps = [
        "@com_google_protobuf//:protoc_lib",
        "@com_google_protobuf//:protobuf",
    ],
)

# Create a library of our protobuf message files
proto_library(
    name = "ignmsgs_proto",
    srcs = protos,
    strip_import_prefix = "proto",
)

# Create a library of our protobuf message files
proto_library(
    name = "ignmsgs_proto_public",
    srcs = protos,
    strip_import_prefix = "proto",
)

# Generate our custom CC files from the protos
ign_msg_gen(
    name = "ignmsgs_proto_cc",
    deps = [":ignmsgs_proto"],
)

cc_binary(
    name = "libignition-msgs6.so",
    srcs = [
        ":ignmsgs_proto_cc",
        "src/Factory.cc",
        "src/Filesystem.cc",
        "src/Utility.cc",
    ] + public_headers,
    includes = ["include"],
    linkopts = ["-Wl,-soname,libignition-msgs6.so", "-ltinyxml2"],
    linkshared = True,
    linkstatic = True,
    visibility = [],
    deps = [
        ":ignmsgs_proto_cc",
        "//ign_math:ign_math",
        "@com_google_protobuf//:protobuf",
    ]
)

cc_library(
    name = "ign_msgs",
    srcs = ["libignition-msgs6.so"],
    hdrs = public_headers + [":ignmsgs_proto_cc"],
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
        ":ignmsgs_proto_cc",
        "//ign_math:ign_math",
        "@com_google_protobuf//:protoc_lib",
        "@com_google_protobuf//:protobuf",
    ]
)

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    deps = [
        ":ign_msgs",
        "//ign_msgs/test:test_utils",
        "@gtest//:gtest",
        "@gtest//:gtest_main",
    ],
    data = ["//ign_msgs/test:desc/stringmsg.desc"],
) for src in glob(
    [
        "src/*_TEST.cc",
    ],
)]

exports_files(["src/cmd/cmdmsgs.rb.in"])
